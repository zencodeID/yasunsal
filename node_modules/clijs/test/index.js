var cli = require('..');
var assert = require('assert');

describe('cli', function() {

  it('should export a function', function() {
    assert.equal('function', typeof cli);
  });

  it('should export Cli', function() {
    assert.equal('function', typeof cli.Cli);
  });

  it('should create a new Cli instance', function() {
    assert(cli('foo') instanceof cli.Cli);
  });

  it('should export Command', function() {
    assert.equal('function', typeof cli.Command);
  });

  it('should have a default command', function() {
    var c = cli('foobar');
    assert(c._command instanceof cli.Command);
  });

  it('should export Option', function() {
    assert.equal('function', typeof cli.Option);
  });

  it('should bind fn to the global command', function() {
    var c = cli('foobar').fn(function() {});
    assert.equal('function', typeof c._command.fn);
  });

  it('should interpolate a string', function() {
    var r = cli.interpolate('{name}', 'foobar');
    assert.deepEqual(r, ['foobar']);
  });

  it('should add a new subcommand', function() {
    var c = cli('foobar');

    c.command('create', function() {

    });

    assert.equal(c._command.commands.length, 1);
    assert.equal(c._command.commands[0].name, 'create');
    assert.equal('function', typeof c._command.commands[0].fn);
  });

  it('should parse a command', function() {
    var c = cli('foobar');
    var name;

    c.command('create {name}', function(n) {
      name = n;
    });

    c.run(['node', './foobar', 'create huh']);

    assert.equal(name, 'huh');
  });

  it('should parse two commands', function() {
    var command = cli('tower');
    var i = 0;

    command.command('create {name}', function(n) {
      i++;
    });

    var gen = command.command('generate', function() {
        i++;
      })
      .command('model {name}', function(m) {
        i++;
      });

    command.run(['node', 'tower', 'create foobar']);
    command.run(['node', 'tower', 'generate']);
    command.run(['node', 'tower', 'generate model user']);

    assert.equal(i, 3);
  });

});
